{"version":3,"sources":["logo.svg","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","API_URL","Search","state","error","query","results","search","isLoading","getInfo","axios","get","concat","_this","then","_ref","data","setState","catch","_handleSearch","length","_onClear","react_default","a","createElement","lib","Object","assign","this","labelKey","filterBy","minLength","onSearch","placeholder","options","onClick","renderMenuItemChildren","option","props","suggestion","selected","Component","library","add","faIgloo","App","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","components_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wOCMlCC,EAAU,iDAkEDC,6MA/DbC,MAAQ,CACNC,OAAO,EACPC,MAAO,GACPC,QAAS,GACTC,OAAQ,GACRC,WAAW,KAGbC,QAAU,WACRC,IAAMC,IAAN,GAAAC,OAAaX,EAAb,cAAAW,OAAiCC,EAAKV,MAAME,QACzCS,KAAK,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACPH,EAAKI,SAAS,CACZX,QAASU,MAGZE,MAAM,kBAAML,EAAKI,SAAS,CAAEb,OAAO,SA0BxCe,cAAgB,SAACd,GACfQ,EAAKI,SAAS,CACZZ,MAAOA,GACN,WACGQ,EAAKV,MAAME,OAASQ,EAAKV,MAAME,MAAMe,OAAS,EAE5CP,EAAKV,MAAME,MAAMe,OAAS,IAAM,GAClCP,EAAKJ,UAEGI,EAAKV,MAAME,WAM3BgB,SAAW,SAAChB,GACVQ,EAAKI,SAAS,CACZX,QAAS,8EAtCX,OACEgB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,eAADC,OAAAC,OAAA,GACMC,KAAKzB,MADX,CAEE0B,SAAS,aACTC,SAAU,CAAC,cACXC,UAAW,EACXC,SAAUJ,KAAKT,cACfc,YAAY,2BACZC,QAASN,KAAKzB,MAAMG,QACpB6B,QAASP,KAAKP,SACde,uBAAwB,SAACC,EAAQC,GAAT,OACtBhB,EAAAC,EAAAC,cAAA,WAAMa,EAAOE,aAEfC,SAAUZ,KAAKzB,MAAMqC,oBAnCVC,uCCErBC,IAAQC,IAAIC,SA2BGC,mLAvBX,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACfxB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,+CACbxB,EAAAC,EAAAC,cAAA,KAAGsB,UAAU,eAAeC,KAAK,KAAjC,mBACAzB,EAAAC,EAAAC,cAAA,UAAQsB,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpL/B,EAAAC,EAAAC,cAAA,QAAMsB,UAAU,yBAGlBxB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,2BAA2BQ,GAAG,0BAC3ChC,EAAAC,EAAAC,cAAA,MAAIsB,UAAU,uBAEdxB,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGsB,UAAU,gBAClBxB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGsB,UAAU,oBAClBxB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGsB,UAAU,kBAGpBxB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC+B,EAAD,CAAQf,SAAUZ,KAAKU,MAAME,WAAjC,aAnBUC,aCAEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECTNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,KAAK,SAAAuD,GACjCA,EAAaC","file":"static/js/main.419346d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport axios from 'axios'\nimport '../index.css';\nimport Suggestions from './Suggestions'\nimport Autocomplete from '../../node_modules/react-autocomplete'\nimport {AsyncTypeahead} from 'react-bootstrap-typeahead';\nconst API_URL = 'http://api.dataatwork.org/v1/jobs/autocomplete'\n\nclass Search extends Component {\n  state = {\n    error: false,\n    query: '',\n    results: [],\n    search: '',\n    isLoading: false\n  }\n  //function that calls the data work API\n  getInfo = () => {\n    axios.get(`${API_URL}?contains=${this.state.query}`)\n      .then(({ data }) => {\n        this.setState({\n          results: data\n        })\n      })\n      .catch(() => this.setState({ error: true }))\n  }\n\n\n  render() {\n    return (\n      <div>\n        <AsyncTypeahead\n          {...this.state}\n          labelKey=\"suggestion\"\n          filterBy={['suggestion']}\n          minLength={2}\n          onSearch={this._handleSearch}\n          placeholder=\"Search for job skills...\"\n          options={this.state.results}\n          onClick={this._onClear}\n          renderMenuItemChildren={(option, props) => (\n            <div>{option.suggestion}</div>\n          )}\n          selected={this.state.selected}\n        />        \n      </div>\n\n    )\n  }\n  //function to search the coincidences\n  _handleSearch = (query) => {\n    this.setState({\n      query: query\n    }, () => {\n      if (this.state.query && this.state.query.length > 1) {\n        // this.showDropdown()\n        if (this.state.query.length % 2 === 0) {\n          this.getInfo()\n        }\n      } else if (!this.state.query) {\n        // this.hideDropdown()\n      }\n    })\n  }\n\n  _onClear = (query) => {\n    this.setState({\n      results: []\n    })\n  }\n}\n\nexport default Search\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Search from './components/Search'\n\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faIgloo } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faIgloo)\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">Start bootstrap</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n          </ul>\n          <Search/>\n          <div><i className=\"fa fa-bell\"></i></div>\n          <div><i className=\"fa fa-envelope\"></i></div>\n          <div><i className=\"fa fa-user\"></i></div>\n        </div>\n        </nav>\n        <h1><Search selected={this.props.selected} /> </h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}